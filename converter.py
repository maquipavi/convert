# -*- coding: utf-8 -*-
"""Converte texto Markdown selecionado para caracteres Unicode."""

import re
from typing import Dict, Callable, Optional

# --- Mapeamentos de Caracteres Unicode ---

# Negrito (Sans-Serif Bold)
UNICODE_BOLD: Dict[str, str] = {
    'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö',
    'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°',
    'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®',
    'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
    'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
    'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
    'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
    'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá',
    '0': 'ùü¨', '1': 'ùü≠', '2': 'ùüÆ', '3': 'ùüØ', '4': 'ùü∞', '5': 'ùü±', '6': 'ùü≤',
    '7': 'ùü≥', '8': 'ùü¥', '9': 'ùüµ'
}

# It√°lico (Sans-Serif Italic)
UNICODE_ITALIC: Dict[str, str] = {
    'A': 'ùòà', 'B': 'ùòâ', 'C': 'ùòä', 'D': 'ùòã', 'E': 'ùòå', 'F': 'ùòç', 'G': 'ùòé',
    'H': 'ùòè', 'I': 'ùòê', 'J': 'ùòë', 'K': 'ùòí', 'L': 'ùòì', 'M': 'ùòî', 'N': 'ùòï',
    'O': 'ùòñ', 'P': 'ùòó', 'Q': 'ùòò', 'R': 'ùòô', 'S': 'ùòö', 'T': 'ùòõ', 'U': 'ùòú',
    'V': 'ùòù', 'W': 'ùòû', 'X': 'ùòü', 'Y': 'ùò†', 'Z': 'ùò°',
    'a': 'ùò¢', 'b': 'ùò£', 'c': 'ùò§', 'd': 'ùò•', 'e': 'ùò¶', 'f': 'ùòß', 'g': 'ùò®',
    'h': 'ùò©', 'i': 'ùò™', 'j': 'ùò´', 'k': 'ùò¨', 'l': 'ùò≠', 'm': 'ùòÆ', 'n': 'ùòØ',
    'o': 'ùò∞', 'p': 'ùò±', 'q': 'ùò≤', 'r': 'ùò≥', 's': 'ùò¥', 't': 'ùòµ', 'u': 'ùò∂',
    'v': 'ùò∑', 'w': 'ùò∏', 'x': 'ùòπ', 'y': 'ùò∫', 'z': 'ùòª'
}

# Negrito-It√°lico (Sans-Serif Bold Italic)
UNICODE_BOLD_ITALIC: Dict[str, str] = {
    'A': 'ùòº', 'B': 'ùòΩ', 'C': 'ùòæ', 'D': 'ùòø', 'E': 'ùôÄ', 'F': 'ùôÅ', 'G': 'ùôÇ',
    'H': 'ùôÉ', 'I': 'ùôÑ', 'J': 'ùôÖ', 'K': 'ùôÜ', 'L': 'ùôá', 'M': 'ùôà', 'N': 'ùôâ',
    'O': 'ùôä', 'P': 'ùôã', 'Q': 'ùôå', 'R': 'ùôç', 'S': 'ùôé', 'T': 'ùôè', 'U': 'ùôê',
    'V': 'ùôë', 'W': 'ùôí', 'X': 'ùôì', 'Y': 'ùôî', 'Z': 'ùôï',
    'a': 'ùôñ', 'b': 'ùôó', 'c': 'ùôò', 'd': 'ùôô', 'e': 'ùôö', 'f': 'ùôõ', 'g': 'ùôú',
    'h': 'ùôù', 'i': 'ùôû', 'j': 'ùôü', 'k': 'ùô†', 'l': 'ùô°', 'm': 'ùô¢', 'n': 'ùô£',
    'o': 'ùô§', 'p': 'ùô•', 'q': 'ùô¶', 'r': 'ùôß', 's': 'ùô®', 't': 'ùô©', 'u': 'ùô™',
    'v': 'ùô´', 'w': 'ùô¨', 'x': 'ùô≠', 'y': 'ùôÆ', 'z': 'ùôØ'
}

# Script (Caligr√°fico)
UNICODE_SCRIPT: Dict[str, str] = {
    'A': 'ùíú', 'B': '‚Ñ¨', 'C': 'ùíû', 'D': 'ùíü', 'E': '‚Ñ∞', 'F': '‚Ñ±', 'G': 'ùí¢',
    'H': '‚Ñã', 'I': '‚Ñê', 'J': 'ùí•', 'K': 'ùí¶', 'L': '‚Ñí', 'M': '‚Ñ≥', 'N': 'ùí©',
    'O': 'ùí™', 'P': 'ùí´', 'Q': 'ùí¨', 'R': '‚Ñõ', 'S': 'ùíÆ', 'T': 'ùíØ', 'U': 'ùí∞',
    'V': 'ùí±', 'W': 'ùí≤', 'X': 'ùí≥', 'Y': 'ùí¥', 'Z': 'ùíµ',
    'a': 'ùí∂', 'b': 'ùí∑', 'c': 'ùí∏', 'd': 'ùíπ', 'e': '‚ÑØ', 'f': 'ùíª', 'g': '‚Ñä',
    'h': 'ùíΩ', 'i': 'ùíæ', 'j': 'ùíø', 'k': 'ùìÄ', 'l': 'ùìÅ', 'm': 'ùìÇ', 'n': 'ùìÉ',
    'o': '‚Ñ¥', 'p': 'ùìÖ', 'q': 'ùìÜ', 'r': 'ùìá', 's': 'ùìà', 't': 'ùìâ', 'u': 'ùìä',
    'v': 'ùìã', 'w': 'ùìå', 'x': 'ùìç', 'y': 'ùìé', 'z': 'ùìè'
}

# Script Bold (Caligr√°fico Negrito)
UNICODE_SCRIPT_BOLD: Dict[str, str] = {
    'A': 'ùìê', 'B': 'ùìë', 'C': 'ùìí', 'D': 'ùìì', 'E': 'ùìî', 'F': 'ùìï', 'G': 'ùìñ',
    'H': 'ùìó', 'I': 'ùìò', 'J': 'ùìô', 'K': 'ùìö', 'L': 'ùìõ', 'M': 'ùìú', 'N': 'ùìù',
    'O': 'ùìû', 'P': 'ùìü', 'Q': 'ùì†', 'R': 'ùì°', 'S': 'ùì¢', 'T': 'ùì£', 'U': 'ùì§',
    'V': 'ùì•', 'W': 'ùì¶', 'X': 'ùìß', 'Y': 'ùì®', 'Z': 'ùì©',
    'a': 'ùì™', 'b': 'ùì´', 'c': 'ùì¨', 'd': 'ùì≠', 'e': 'ùìÆ', 'f': 'ùìØ', 'g': 'ùì∞',
    'h': 'ùì±', 'i': 'ùì≤', 'j': 'ùì≥', 'k': 'ùì¥', 'l': 'ùìµ', 'm': 'ùì∂', 'n': 'ùì∑',
    'o': 'ùì∏', 'p': 'ùìπ', 'q': 'ùì∫', 'r': 'ùìª', 's': 'ùìº', 't': 'ùìΩ', 'u': 'ùìæ',
    'v': 'ùìø', 'w': 'ùîÄ', 'x': 'ùîÅ', 'y': 'ùîÇ', 'z': 'ùîÉ'
}

# --- Fun√ß√µes Auxiliares de Convers√£o de Caracteres ---

def _convert_char(char: str, mapping: Dict[str, str]) -> str:
    """Converte um √∫nico caractere usando o mapeamento fornecido."""
    return mapping.get(char, char)

def _convert_text(text: str, mapping: Dict[str, str]) -> str:
    """Converte uma string inteira usando o mapeamento fornecido."""
    converted_chars = [_convert_char(char, mapping) for char in text]
    # Verifica se alguma convers√£o realmente ocorreu
    if all(original == converted for original, converted in zip(text, converted_chars)):
        return text # Retorna o texto original se nada mudou
    return ''.join(converted_chars)

def _convert_strikethrough(text: str) -> str:
    """Adiciona o caractere combinante de tachado a cada caractere da string."""
    processed_text = ""
    for char in text:
        if 0x1D400 <= ord(char) <= 0x1D7FF:
            processed_text += char
        else:
            processed_text += char + '\u0336'
    return processed_text

# --- Fun√ß√µes de Convers√£o de Markdown ---

def convert_bold(text: str, options: Optional[Dict] = None) -> str:
    """Converte Markdown bold (`**text**` ou `__text__`) para Unicode."""
    style = options.get('bold_style', 'sans') if options else 'sans'
    mapping = UNICODE_BOLD
    if style == 'script':
        mapping = UNICODE_SCRIPT_BOLD

    def replace_bold(match: re.Match) -> str:
        content = match.group(2)
        if not content or content.isspace():
            return match.group(0)
        converted_content = _convert_text(content, mapping)
        # Se a convers√£o n√£o alterou o conte√∫do (ex: n√∫meros sem mapeamento), retorna o original com marcadores
        if converted_content == content:
            return match.group(0)
        return converted_content

    bold_regex = r'(\*\*|__)(.+?)\1'
    return re.sub(bold_regex, replace_bold, text)

def convert_italic(text: str, options: Optional[Dict] = None) -> str:
    """Converte Markdown italic (`*text*` ou `_text_`) para Unicode."""
    style = options.get('italic_style', 'sans') if options else 'sans'
    mapping = UNICODE_ITALIC
    if style == 'script':
        mapping = UNICODE_SCRIPT

    def replace_italic(match: re.Match) -> str:
        content = match.group(2)
        if not content or content.isspace():
            return match.group(0)
        converted_content = _convert_text(content, mapping)
        # Se a convers√£o n√£o alterou o conte√∫do, retorna o original com marcadores
        if converted_content == content:
            return match.group(0)
        return converted_content

    italic_regex_with_content = r'(\*|_)(.+?)\1'
    return re.sub(italic_regex_with_content, replace_italic, text)

def convert_bold_italic(text: str, options: Optional[Dict] = None) -> str:
    """Converte Markdown bold-italic (`***text***` ou `___text___`) para Unicode."""
    style = options.get('bold_italic_style', 'sans') if options else 'sans'
    mapping = UNICODE_BOLD_ITALIC
    if style == 'script':
        mapping = UNICODE_SCRIPT_BOLD

    def replace_bold_italic(match: re.Match) -> str:
        content = match.group(2)
        if not content or content.isspace():
            return match.group(0)
        converted_content = _convert_text(content, mapping)
        # Se a convers√£o n√£o alterou o conte√∫do, retorna o original com marcadores
        if converted_content == content:
            return match.group(0)
        return converted_content

    bold_italic_regex = r'(\*\*\*|___)(.+?)\1'
    return re.sub(bold_italic_regex, replace_bold_italic, text)

def convert_strikethrough(text: str, options: Optional[Dict] = None) -> str:
    """Converte Markdown strikethrough (`~~text~~`) para Unicode."""
    strikethrough_regex = r'~~(.+?)~~'
    # N√£o retorna o original se n√£o houver convers√£o, pois strikethrough sempre se aplica
    return re.sub(strikethrough_regex, lambda m: _convert_strikethrough(m.group(1)), text)

def convert_blockquote(text: str, options: Optional[Dict] = None) -> str:
    """Converte Markdown blockquote (`> text`) para Unicode (prefixo)."""
    blockquote_regex = r'^(\s*)> (.*)'
    match = re.match(blockquote_regex, text)
    if match:
        indent = match.group(1)
        content = match.group(2)
        return f"{indent}‚ñé {content}"
    return text

def convert_unordered_list(text: str, options: Optional[Dict] = None) -> str:
    """Converte Markdown unordered list (`- text` ou `* text`) para Unicode."""
    ulist_regex = r'^(\s*)(\*|-)\s+(.*)'
    return re.sub(ulist_regex, r'\1‚Ä¢ \3', text)

def convert_horizontal_line(text: str, options: Optional[Dict] = None) -> str:
    """Converte Markdown horizontal line (`---`, `***`, `___`) para Unicode."""
    hr_regex = r'^\s*(?:-{3,}|\*{3,}|_{3,})\s*$'
    if re.match(hr_regex, text):
        return '‚îÄ' * 10
    return text

# --- Fun√ß√£o Principal de Convers√£o ---

CONVERSION_PIPELINE: list[Callable[[str, Optional[Dict]], str]] = [
    convert_horizontal_line,
    convert_blockquote,
    convert_unordered_list,
    convert_bold_italic,
    convert_bold,
    convert_italic,
    convert_strikethrough,
]

def markdown_to_unicode(markdown_text: str, options: Optional[Dict] = None) -> str:
    """Converte uma string Markdown completa para Unicode.

    Args:
        markdown_text: O texto Markdown a ser convertido.
        options: Dicion√°rio de op√ß√µes de formata√ß√£o (ex: {'bold_style': 'script'}).

    Returns:
        O texto convertido para Unicode.
    """
    lines = markdown_text.split('\n')
    unicode_lines = []
    for line in lines:
        processed_line = line
        original_line_state = processed_line # Salva estado antes de inline

        # Aplica convers√µes de bloco primeiro
        block_applied = False
        for convert_func in [convert_horizontal_line, convert_blockquote, convert_unordered_list]:
            new_line = convert_func(processed_line, options)
            if new_line != processed_line:
                processed_line = new_line
                block_applied = True
                break # Aplica apenas a primeira convers√£o de bloco que corresponder

        # Se n√£o foi uma linha horizontal (que √© um bloco terminal),
        # aplica convers√µes inline
        is_hr = (len(processed_line) == 10 and all(c == '‚îÄ' for c in processed_line))
        if not is_hr:
            inline_pipeline = [convert_bold_italic, convert_bold, convert_italic, convert_strikethrough]
            for convert_func in inline_pipeline:
                processed_line = convert_func(processed_line, options)

        unicode_lines.append(processed_line)

    return '\n'.join(unicode_lines)

# --- Exemplo de Uso ---
if __name__ == '__main__':
    md_input = """
# Exemplo de Texto

Este √© um **texto** com __negrito__.
Este √© um *texto* com _it√°lico_.
Este √© um ***texto*** com ___negrito e it√°lico___.
Este √© um ~~texto tachado~~.
Este √© um *123* e **456**.

  - Item de lista 1
  * Item de lista 2

> Isto √© um blockquote.
> > Nested quote (n√£o suportado ainda)

---

Texto normal ap√≥s a linha.

**Op√ß√µes de Estilo:**
Texto com **negrito sans**.
Texto com *it√°lico sans*.
Texto com ***negrito it√°lico sans***.
Texto com **_bold e italic_** (teste aninhado).
Texto com *__italic e bold__* (teste aninhado).
"""

    print("--- Convers√£o Padr√£o (Sans-Serif) ---")
    unicode_output_sans = markdown_to_unicode(md_input)
    print(unicode_output_sans)

    print("\n--- Convers√£o com Op√ß√µes (Script) ---")
    script_options = {
        'bold_style': 'script',
        'italic_style': 'script',
        'bold_italic_style': 'script'
    }
    unicode_output_script = markdown_to_unicode(md_input, options=script_options)
    print(unicode_output_script)

    print("\n--- Teste Espec√≠fico Blockquote e HR ---")
    md_test = "  > Linha de cita√ß√£o\n  ---"
    print(markdown_to_unicode(md_test))

    print("\n--- Teste Espec√≠fico Lista ---")
    md_list = "  - Item A\n  * Item B"
    print(markdown_to_unicode(md_list))

