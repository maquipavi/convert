# app.py

import streamlit as st
import re
from typing import Optional, Dict, Any, List

# --- Mapeamentos Unicode para Estilos ---
_BOLD_MAP = {
    'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ', 'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì', 'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô',
    'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£', 'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠', 'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥',
    '0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí', '5': 'ùüì', '6': 'ùüî', '7': 'ùüï', '8': 'ùüñ', '9': 'ùüó',
}

_ITALIC_MAP = {
    'A': 'ùòà', 'B': 'ùòâ', 'C': 'ùòä', 'D': 'ùòã', 'E': 'ùòå', 'F': 'ùòç', 'G': 'ùòé', 'H': 'ùòè', 'I': 'ùòê', 'J': 'ùòë', 'K': 'ùòí', 'L': 'ùòì', 'M': 'ùòî', 'N': 'ùòï', 'O': 'ùòñ', 'P': 'ùòó', 'Q': 'ùòò', 'R': 'ùòô', 'S': 'ùòö', 'T': 'ùòõ', 'U': 'ùòú', 'V': 'ùòù', 'W': 'ùòû', 'X': 'ùòü', 'Y': 'ùò†', 'Z': 'ùò°',
    'a': 'ùò¢', 'b': 'ùò£', 'c': 'ùò§', 'd': 'ùò•', 'e': 'ùò¶', 'f': 'ùòß', 'g': 'ùò®', 'h': 'ùò©', 'i': 'ùò™', 'j': 'ùò´', 'k': 'ùò¨', 'l': 'ùò≠', 'm': 'ùòÆ', 'n': 'ùòØ', 'o': 'ùò∞', 'p': 'ùò±', 'q': 'ùò≤', 'r': 'ùò≥', 's': 'ùò¥', 't': 'ùòµ', 'u': 'ùò∂', 'v': 'ùò∑', 'w': 'ùò∏', 'x': 'ùòπ', 'y': 'ùò∫', 'z': 'ùòª',
}

_MONOSPACE_MAP = {
    'A': 'ùô∞', 'B': 'ùô±', 'C': 'ùô≤', 'D': 'ùô≥', 'E': 'ùô¥', 'F': 'ùôµ', 'G': 'ùô∂', 'H': 'ùô∑', 'I': 'ùô∏', 'J': 'ùôπ', 'K': 'ùô∫', 'L': 'ùôª', 'M': 'ùôº', 'N': 'ùôΩ', 'O': 'ùôæ', 'P': 'ùôø', 'Q': 'ùöÄ', 'R': 'ùöÅ', 'S': 'ùöÇ', 'T': 'ùöÉ', 'U': 'ùöÑ', 'V': 'ùöÖ', 'W': 'ùöÜ', 'X': 'ùöá', 'Y': 'ùöà', 'Z': 'ùö∫',
    'a': 'ùöä', 'b': 'ùöã', 'c': 'ùöå', 'd': 'ùöç', 'e': 'ùöé', 'f': 'ùöè', 'g': 'ùöê', 'h': 'ùöë', 'i': 'ùöí', 'j': 'ùöì', 'k': 'ùöî', 'l': 'ùöï', 'm': 'ùöñ', 'n': 'ùöó', 'o': 'ùöò', 'p': 'ùöô', 'q': 'ùöö', 'r': 'ùöõ', 's': 'ùöú', 't': 'ùöù', 'u': 'ùöû', 'v': 'ùöü', 'w': 'ùö†', 'x': 'ùö°', 'y': 'ùö¢', 'z': 'ùö£',
    '0': 'ùü∂', '1': 'ùü∑', '2': 'ùü∏', '3': 'ùüπ', '4': 'ùü∫', '5': 'ùüª', '6': 'ùüº', '7': 'ùüΩ', '8': 'ùüæ', '9': 'ùüø',
}

_STRIKETHROUGH_CHAR = '\u0336' # Combining Long Stroke Overlay

# --- Fun√ß√µes Auxiliares para Aplicar Estilos ---
def _apply_mapping(text: str, mapping: Dict[str, str]) -> str:
    """Aplica um mapeamento de caracteres a uma string."""
    return "".join(mapping.get(char, char) for char in text)

def _to_bold(text: str) -> str:
    """Converte texto para Unicode Bold."""
    return _apply_mapping(text, _BOLD_MAP)

def _to_italic(text: str) -> str:
    """Converte texto para Unicode Italic."""
    return _apply_mapping(text, _ITALIC_MAP)

def _to_monospace(text: str) -> str:
    """Converte texto para Unicode Monospace."""
    return _apply_mapping(text, _MONOSPACE_MAP)

def _to_strikethrough(text: str) -> str:
    """Aplica o caractere de Strikethrough a cada caractere."""
    return "".join(char + _STRIKETHROUGH_CHAR for char in text)

# --- Fun√ß√µes de Substitui√ß√£o para Regex ---
def _code_replacer(match: re.Match) -> str:
    """Substitui `code` por texto monospace."""
    return _to_monospace(match.group(1))

def _strikethrough_replacer(match: re.Match) -> str:
    """Substitui ~~strikethrough~~ por texto riscado."""
    return _to_strikethrough(match.group(1))

def _bold_replacer(match: re.Match) -> str:
    """Substitui **bold** ou __bold__ por texto bold Unicode."""
    return _to_bold(match.group(1))

def _italic_replacer_star(match: re.Match) -> str:
    """Substitui *italic* por texto italic Unicode."""
    return _to_italic(match.group(1))

def _italic_replacer_underscore(match: re.Match) -> str:
    """Substitui _italic_ por texto italic Unicode."""
    return _to_italic(match.group(1))

def _link_replacer(match: re.Match) -> str:
    """Substitui [text](url) por text."""
    return match.group(1)

# --- Fun√ß√£o Principal ---
def markdown_to_unicode(markdown_text: str, options: Optional[Dict[str, Any]] = None) -> str:
    """
    Converte uma string Markdown b√°sica para uma string usando caracteres Unicode estilizados.

    Args:
        markdown_text: A string contendo Markdown.
        options: Um dicion√°rio opcional para configurar a convers√£o.
                 Op√ß√µes suportadas:
                 - 'horizontal_rule_char' (str): O caractere a usar para a linha horizontal (padr√£o: '‚îÄ').
                 - 'horizontal_rule_length' (int): O comprimento da linha horizontal (padr√£o: 20).

    Returns:
        A string convertida com caracteres Unicode.
    """
    if not isinstance(markdown_text, str):
        raise TypeError("Input must be a string.")

    # 1. Configurar Op√ß√µes
    effective_options: Dict[str, Any] = {
        'horizontal_rule_char': '‚îÄ',  # Caractere para HR
        'horizontal_rule_length': 20,  # Comprimento padr√£o da HR
    }

    if options:
        for key, value in options.items():
            if key in effective_options:
                if key == 'horizontal_rule_char' and not isinstance(value, str):
                    continue
                if key == 'horizontal_rule_length' and not isinstance(value, int):
                    continue
                effective_options[key] = value

    hr_char = effective_options['horizontal_rule_char']
    hr_length = effective_options['horizontal_rule_length']

    processed_lines: List[str] = []

    # 2. Processar elementos de n√≠vel de bloco (linha por linha)
    lines = markdown_text.splitlines()

    for line in lines:
        # Horizontal Rule (deve ser verificado primeiro, pois consome a linha inteira)
        if re.fullmatch(r'\s*([-*_])(\s*\1){2,}\s*', line):
            processed_lines.append(hr_char * hr_length)
            continue

        # Blockquote
        blockquote_match = re.match(r'^\s*>\s*(.*)$', line)
        if blockquote_match:
            processed_lines.append(f"| {blockquote_match.group(1)}")
            continue

        # Unordered List
        list_match = re.match(r'^\s*[-*+]\s*(.*)$', line)
        if list_match:
            # Garante que o texto da lista n√£o seja interpretado como Markdown (ex: bold)
            list_text = list_match.group(1)
            processed_lines.append(f"‚Ä¢ {list_text}")
            continue

        # Headers
        header_match = re.match(r'^(#+)\s*(.*)$', line)
        if header_match:
            header_text = header_match.group(2)
            processed_lines.append(header_text)
            continue

        # Se n√£o for um elemento de bloco conhecido, adicione a linha como est√°
        processed_lines.append(line)

    # Junta as linhas processadas para processar elementos inline
    intermediate_text = "\n".join(processed_lines)

    # 3. Processar elementos Inline
    result_text = intermediate_text

    # Ordem de processamento inline pode importar.
    # Come√ßando com elementos mais "internos" ou com caracteres especiais.

    # C√≥digo Inline: `code` -> monospace
    result_text = re.sub(r'(?<!\\)`(.+?)(?<!\\)`', _code_replacer, result_text)

    # Strikethrough: ~~strikethrough~~ -> riscado
    result_text = re.sub(r'~~(.+?)~~', _strikethrough_replacer, result_text)

    # Bold: **bold** ou __bold__ -> bold Unicode
    # Processa ** e __ com a mesma fun√ß√£o
    result_text = re.sub(r'(?<![\*\_])(\*\*|__)(.+?)(\*\*|__)(?![\*\_])', _bold_replacer, result_text)

    # Italic: *italic* ou _italic_ -> italic Unicode
    # Cuidado: Evitar * em **texto**, _ em __texto__
    result_text = re.sub(r'(?<![\\*])\*([^*]+?)\*(?![\\*])', _italic_replacer_star, result_text)
    result_text = re.sub(r'(?<![\\_])_([^_]+?)_(?![\\_])', _italic_replacer_underscore, result_text)

    # Link: [text](url) -> text
    result_text = re.sub(r'\[(.+?)\]\(.+?\)', _link_replacer, result_text)

    # Retornar o texto final com as convers√µes
    return result_text


# --- Interface Streamlit ---

st.set_page_config(page_title="Markdown to Unicode Converter", layout="wide")

st.title("‚úèÔ∏è Markdown to Unicode Converter")

st.write("""
Use esta ferramenta para converter texto formatado com Markdown b√°sico
(bold, italic, code, strikethrough, links, cabe√ßalhos, listas, blockquotes, linhas horizontais)
em texto usando caracteres Unicode estilizados que podem ser usados em redes sociais, etc.
""")

# √Årea de Input
markdown_input = st.text_area(
    "Cole seu texto Markdown aqui:",
    value="""# Exemplo de Markdown
## T√≠tulo
Ol√°, **mundo**! Este √© um *exemplo* de texto.

Podemos usar `c√≥digo inline` e ~~texto riscado~~.
Aqui est√° um [link para o Google](https://google.com).

> Isto √© um bloco de cita√ß√£o.
> Outra linha da cita√ß√£o.

Lista de compras:
* Ma√ß√£s
- Bananas
+ Cerejas

---

Uma linha horizontal.

Mais texto.
***

Fim do exemplo.
""",
    height=300
)

# Op√ß√µes na Sidebar
st.sidebar.header("Op√ß√µes de Convers√£o")

hr_char_option = st.sidebar.text_input(
    "Caractere para Linha Horizontal:",
    value="‚îÄ"  # U+2500 BOX DRAWINGS LIGHT HORIZONTAL
)

hr_length_option = st.sidebar.number_input(
    "Comprimento da Linha Horizontal:",
    min_value=5,
    max_value=100,
    value=30,
    step=1
)

# Coleta as op√ß√µes em um dicion√°rio
options_dict = {
    'horizontal_rule_char': hr_char_option,
    'horizontal_rule_length': hr_length_option,
}

# Realiza a convers√£o
if markdown_input:
    unicode_output = markdown_to_unicode(markdown_input, options_dict)

    # √Årea de Output
    st.subheader("Texto Unicode Convertido:")

    st.text(unicode_output)  # Use st.text para exibir o texto bruto com os caracteres unicode

    st.markdown("""
    <small>Copie o texto acima. A apar√™ncia pode variar dependendo da fonte e plataforma onde ele for colado.</small>
    """, unsafe_allow_html=True)
else:
    st.info("Cole seu texto Markdown na caixa acima para ver a convers√£o.")

st.markdown("---")
st.write("Desenvolvido com ‚ù§Ô∏è por Eng¬∫ Paulo Rog√©rio Veiga Silva!")
st.markdown("""
**Markdown B√°sico Suportado:**
*   `**bold**` ou `__bold__` -> Negrito Unicode (ùêÄ)
*   `*italic*` ou `_italic_` -> It√°lico Unicode (ùòà)
*   ``` `code` ``` -> Monospace Unicode (ùöä)
*   ``` ~~strikethrough~~ ``` -> Riscado (TÃ∂eÃ∂xÃ∂tÃ∂)
*   ``` [text](url) ``` -> Apenas o texto do link
*   ``` # Header ```, ``` ## Subheader ```, etc. -> Texto simples ou Negrito (configur√°vel)
*   ``` > Blockquote ``` -> Texto precedido por `|`
*   ``` * Item ```, ``` - Item ```, ``` + Item ``` -> Texto precedido por marcador de lista (configur√°vel)
*   ``` --- ```, ``` *** ```, ``` ___ ``` -> Linha horizontal (configur√°vel)
""")
